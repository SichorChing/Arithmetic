!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.arithmetic=e():t.arithmetic=e()}(window,function(){return function(t){var e={};function r(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(s,i,function(e){return t[e]}.bind(null,i));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);class s{constructor(){this.stack=[]}getLength(){return this.stack.length}peek(){const t=this.getLength();return t?this.stack[t-1]:void 0}pop(){return this.stack.pop()}push(t){this.stack.push(t)}reset(){this.stack=[]}}r.d(e,"default",function(){return i});class i{constructor(){this.operand=new s,this.operator=new s,this.tempNum="",this.tempSym=""}matchInBrackets(t){const e=/\([\+|\-|\*|\/|\.|\d]+?\)/g;let r=t.match(e);return r&&r.forEach(e=>{const r=this.calculate(e.replace(/[\(|\)]/g,""));t=t.replace(e,r)}),(r=t.match(e))?this.matchInBrackets(t):t}calculate(t){for(let e=(t=this.matchInBrackets(t)).length-1;0<=e;e--){const r=/[\d|\.]/;let s=t[e];if(r.test(s)){if(this.tempNum=s+this.tempNum,0==e){this.tempSym&&(this.calculateMultiOrDivis(this.tempSym),this.tempSym=""),this.tempNum&&this.operand.push(this.tempNum);break}}else{if(0==e){this.tempSym&&(this.calculateMultiOrDivis(this.tempSym),this.tempSym=""),this.tempNum&&this.operand.push(this.tempNum),this.operator.push(s);break}this.tempSym&&(this.calculateMultiOrDivis(this.tempSym),this.tempSym="");let r=this.operator.peek();const o=t[e-1],a=/[\+|\-|\*|\/]/;if(r)switch(this.tempNum&&(a.test(o)&&"-"==s?(this.operand.push(s+this.tempNum),s=""):this.operand.push(this.tempNum),this.tempNum=""),i.priorityCompare(r,s)){case 2:this.tempSym=this.operator.pop();break;case 1:this.calculateMultiOrDivis(this.operator.pop())}else!r&&this.tempNum&&(a.test(o)&&"-"==s?(this.operand.push(s+this.tempNum),s=""):this.operand.push(this.tempNum),this.tempNum="");s&&this.operator.push(s)}}return this.calculateReversePoland()}calculateReversePoland(){let t=0;for(;0<this.operand.getLength();){if(this.operator.getLength()==this.operand.getLength()){const e=t,r=this.operand.pop();t="+"==this.operator.pop()?i.addition(e,r):i.subtraction(e,r)}else{if(1==this.operand.getLength()){t=parseFloat(this.operand.pop());break}const e=this.operand.pop(),r=this.operand.pop(),s=this.operator.pop();t=this.selectCalculationRule(e,r,s)}this.operand.push(t)}return this.operand.reset(),this.operator.reset(),this.tempNum="",this.tempSym="",t}calculateMultiOrDivis(t){const e=this.operand.pop(),r=this.operand.pop();this.operand.push(this.selectCalculationRule(e,r,t))}selectCalculationRule(t,e,r){switch(r){case"*":return i.multiplication(t,e);case"/":return i.division(t,e);case"+":return i.addition(t,e);default:return i.subtraction(t,e)}}static addition(...t){return parseFloat(t[0])+parseFloat(t[1])}static division(...t){return parseFloat(t[0])/parseFloat(t[1])}static multiplication(...t){return parseFloat(t[0])*parseFloat(t[1])}static subtraction(...t){return parseFloat(t[0])-parseFloat(t[1])}static priorityCompare(t,e){const r=/[\*\/]/;return r.test(t)&&!r.test(e)?2:r.test(t)&&r.test(e)?1:0}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,